create type userStatus as enum ('unconfirmed', 'confirmed', 'banned');
create type codeType as enum ('email-confirm', 'password-reset', 'email-change-from', 'email-change-to');


CREATE TABLE subjects
(
    subject_id SERIAL primary key,
    subject    varchar(100) not null
);
CREATE TABLE tags
(
    tag_id SERIAL primary key,
    tag    varchar(128) not null
);
CREATE TABLE ranks
(
    rank_id    SERIAL primary key,
    min_points int          not null,
    rank_name  varchar(128) not null
);
CREATE TABLE agreements
(
    agreement_id   SERIAL primary key not null,
    agreement_text text               not null,
    created_at     timestamp          not null default now()
);
CREATE TABLE users
(
    id                 SERIAL primary key,
    name               varchar(512)                     not null,
    email              varchar(128)                     not null,
    is_email_confirmed bool       default false         not null,
    status             userStatus default 'unconfirmed' not null,
    password_hash      char(60)                         not null, -- BCrypt
    agreement_id       int                              not null references agreements (agreement_id) on delete set null,
    points             int                              not null default 0
);
CREATE TABLE media
(
    media_id   SERIAL primary key,
    media_uuid uuid         not null,
    file_name  varchar(256) not null,
    file_size  int          not null,
    mime_type  varchar(128) not null,
    created_by int          not null references users (id) on delete set null,
    created_at timestamp    not null default now()
);
CREATE TABLE user_sessions
(
    session_id  SERIAL primary key,
    user_id     int          not null references users (id) on delete cascade,
    created_at  timestamp    not null default now(),
    last_access timestamp    not null default now(),
    token       char(64) not null
);

CREATE TABLE sent_codes
(
    code_id    SERIAL primary key,
    user_id    int          not null references users (id) on delete cascade,
    code       varchar(64)  not null,
    code_type  codeType     not null,
    ttl        int          not null,
    executed   bool                  default false not null,
    created_at timestamp    not null default now(),
    email      varchar(128) not null
);
CREATE TABLE questions
(
    question_id SERIAL primary key,
    title       varchar(512) not null,
    text        text         not null,
    user_id     int          not null references users (id) on delete set null,
    created_at  timestamp    not null default now(),
    subject_id  int          not null references subjects (subject_id) on delete set null
);
CREATE TABLE question_pictures
(
    media_id int not null references media (media_id) on delete cascade,
    question int not null references questions (question_id) on delete cascade
);
CREATE TABLE question_tags
(
    question int not null references questions (question_id) on delete cascade,
    tag      int not null references tags (tag_id) on delete cascade
);
CREATE TABLE answers
(
    response_id          SERIAL primary key,
    user_id              int       not null references users (id) on delete set null,
    question             int       not null references questions (question_id) on delete cascade,
    created_at           timestamp not null default now(),
    marked_as_correct    bool               default false not null,
    marked_as_correct_at timestamp,
    text                 text      not null
);
CREATE TABLE answers_pictures
(
    media_id int not null references media (media_id) on delete cascade,
    response int not null references answers (response_id) on delete cascade
);
CREATE TABLE comments
(
    comment_id       SERIAL primary key,
    user_id          int       not null references users (id) on delete set null,
    created_at       timestamp not null default now(),
    text             text      not null,
    reply_to_answer  int       not null references answers (response_id) on delete cascade,
    reply_to_comment int references comments (comment_id) on delete cascade
);

CREATE INDEX user_by_email ON users (email);
CREATE INDEX user_by_name ON users (name);
CREATE INDEX user_confirmed ON users (is_email_confirmed);
CREATE INDEX user_status ON users (status);



CREATE INDEX user_session_by_user ON user_sessions (user_id);
CREATE INDEX user_session_by_token ON user_sessions (token);
CREATE INDEX user_session_last_access ON user_sessions (last_access);


CREATE INDEX idx_sent_codes_code ON sent_codes (code);
CREATE INDEX idx_sent_codes_user ON sent_codes (user_id);

-- questions
CREATE INDEX question_by_subject ON questions (subject_id);
CREATE INDEX question_created_at ON questions (created_at);
CREATE INDEX question_by_user ON questions (user_id);
CREATE INDEX idx_fts_questions_title ON questions USING gin (to_tsvector('russian', title));


CREATE INDEX question_picture_by_question ON question_pictures (question);


CREATE INDEX question_tag_by_question ON question_tags (question);
CREATE INDEX idx_question_tags_tag ON question_tags (tag);
CREATE INDEX idx_question_tags_question_tag ON question_tags (question, tag);

-- answers

CREATE INDEX answers_by_question ON answers (question);
CREATE INDEX answers_by_user ON answers (user_id);
CREATE INDEX answers_by_marked ON answers (marked_as_correct);


CREATE INDEX answers_picture_by_response ON answers_pictures (response);

-- comments


CREATE INDEX comments_by_answer ON comments (reply_to_answer);
CREATE INDEX comments_by_comment ON comments (reply_to_comment);
CREATE INDEX comments_by_user ON comments (user_id);


CREATE INDEX idx_ranks_min_points ON ranks (min_points);

CREATE INDEX media_uuid_index ON media (media_uuid);